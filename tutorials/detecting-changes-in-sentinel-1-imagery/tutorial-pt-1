{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"tutorial-pt-1","provenance":[{"file_id":"https://github.com/google/earthengine-community/blob/master/tutorials/tutorial-template.ipynb","timestamp":1597829709082}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"8kdsGkYJXXKc","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1597999544662,"user_tz":-120,"elapsed":611,"user":{"displayName":"Mort Canty","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gic8wrtuzbljC46e5I9nhzEOgqYcVXCDqSxyrEQ1Q=s64","userId":"11792105515663483880"}}},"source":["#@title Copyright 2020 The Earth Engine Community Authors { display-mode: \"form\" }\n","#\n","# Licensed under the Apache License, Version 2.0 (the \"License\");\n","# you may not use this file except in compliance with the License.\n","# You may obtain a copy of the License at\n","#\n","# https://www.apache.org/licenses/LICENSE-2.0\n","#\n","# Unless required by applicable law or agreed to in writing, software\n","# distributed under the License is distributed on an \"AS IS\" BASIS,\n","# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","# See the License for the specific language governing permissions and\n","# limitations under the License."],"execution_count":4,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"l18M9_r5XmAQ","colab_type":"text"},"source":["# Detecting Changes in Sentinel-1 Imagery\n","## Part 1. Single and multi-look image statistics\n","\n","Author: mortcanty\n","\n","Issue #210\n","\n","In this tutorial we will analyze Sentinel-1 imagery  in order to detect statistically significant changes over time. As the adverb \"statistically\" hints, we will need a basic understanding of the statistical properties of SAR imagery in order to proceed, and the adjective \"significant\" implies that we  learn the fundamentals of hypothesis testing. In particular we will be concerned with the dual polarimetric intensity images in the GEE archive. The tutorial is in four parts:\n","\n","- 1. Single and multi-look image statistics\n","- 2. Hypothesis testing for change detection\n","- 3. Multitemporal change detection\n","- 4. Applications\n","\n","Much of the material is based on Chapters 5 and 9 of my text [Image Analysis, Classification and Change Detection in Remote Sensing](https://www.amazon.com/Analysis-Classification-Change-Detection-Sensing/dp/1138613223/ref=dp_ob_title_bk). \n","\n","## Context\n","\n","The Sentinel-1 missions of the ESA provide a fantastic source of weather-independent Earth observation data with repeat times of the order of 6 days. The Google Earth Engine team monitor and ingest the imagery data almost as fast as they are produced, thus removing the burden from the user of searching, downloading, pre-processing and georeferencing. The JavaScript and Python API's to the GEE can then be easily programmed to analyze time series of Sentinel-1 acquisitions virtually anywhere on the globe. Detected changes, both short- and long-term, can be related to landscape dynamics and human activity.\n","\n","## Prerequisites\n","\n","The reader should be familiar with basic Python syntax and also with the GEE API (Python or JavaScript, it doesn't matter as they are almost identical).\n","We will take a relaxed view of statistical formalism, without clearly distinguishing random variables from their realizations (measurements). We assume that the reader has, at minimum, an intuitive understanding of the mean and variance of independent measurements $x_i$ of a quantity $x$,\n","\n","$$\n","{\\rm mean}(x) = {1\\over n}\\sum_{i=1}^n x_i\n","$$\n","$$\n","{\\rm var}(x) = {1\\over n}\\sum_{i=1}^n(x_i-{\\rm mean}(x))^2\n","$$\n","\n","and that the measurements can be described by a probability density distribution\n","$p(x)$ with\n","\n","$$\n","\\quad {\\rm mean}(x) = \\int_{-\\infty}^\\infty x p(x)dx,\\quad {\\rm var}(x) = \\int_{-\\infty}^\\infty (x_i-{\\rm mean}(x))^2 p(x)dx\n","$$\n","and\n","$$\n","\\quad \\int_{-\\infty}^\\infty p(x)dx = 1.\n","$$\n","\n","More statistics will be introduced as needed.\n","A highly recommended reference is [Freund's Mathematical Statistics](https://www.amazon.de/John-Freunds-Mathematical-Statistics/dp/013123613X/ref=sr_1_8?__mk_de_DE=%C3%85M%C3%85%C5%BD%C3%95%C3%91&dchild=1&keywords=freund+mathematical+statistics&qid=1597837319&sr=8-8).\n","\n"]},{"cell_type":"markdown","metadata":{"id":"U7i55vr_aKCB","colab_type":"text"},"source":["### Run me first\n","\n","Run the following cell to initialize the API. The output will contain instructions on how to grant this notebook access to Earth Engine using your account."]},{"cell_type":"code","metadata":{"id":"XeFsiSp2aDL6","colab_type":"code","colab":{}},"source":["import ee\n","\n","# Trigger the authentication flow.\n","ee.Authenticate()\n","\n","# Initialize the library.\n","ee.Initialize()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"VOf_UnIcZKBJ","colab_type":"text"},"source":["### Datasets and Python modules\n","Two datasets will be used in the tutorial:\n","- COPERNICUS/S1_GRD_FLOAT\n","  - Sentinel-1 ground range detected images\n","- COPERNICUS/S1_GRD  \n","  - Sentinel-1 ground range detected images converted to decibels\n","\n","The following cell imports some python modules which we will be using as we go along,  and also enables inline graphics."]},{"cell_type":"code","metadata":{"id":"JR0cxCpeIxoY","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1597998515422,"user_tz":-120,"elapsed":1542,"user":{"displayName":"Mort Canty","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gic8wrtuzbljC46e5I9nhzEOgqYcVXCDqSxyrEQ1Q=s64","userId":"11792105515663483880"}}},"source":["import matplotlib.pyplot as plt\n","import numpy as np\n","from scipy.stats import gamma, f\n","import IPython.display as disp\n","%matplotlib inline"],"execution_count":2,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"eelxHh2qc6xg","colab_type":"text"},"source":["And in order to make use of interactive maps, we import the _folium_ package:"]},{"cell_type":"code","metadata":{"id":"VIiyf6azf4mU","colab_type":"code","colab":{}},"source":["# Import the Folium library.\n","import folium\n","\n","# Define a method for displaying Earth Engine image tiles to folium map.\n","def add_ee_layer(self, ee_image_object, vis_params, name):\n","  map_id_dict = ee.Image(ee_image_object).getMapId(vis_params)\n","  folium.raster_layers.TileLayer(\n","    tiles = map_id_dict['tile_fetcher'].url_format,\n","    attr = 'Map Data &copy; <a href=\"https://earthengine.google.com/\">Google Earth Engine</a>',\n","    name = name,\n","    overlay = True,\n","    control = True\n","  ).add_to(self)\n","\n","# Add EE drawing method to folium.\n","folium.Map.add_ee_layer = add_ee_layer"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"r-GuxE6lJHHx","colab_type":"text"},"source":["### A Sentinel-1 image\n","\n","Let's start work by grabbing a spatial subset of a Sentinel-1 image from the archive. We'll define a region of interest (roi) as the long-lat corners of a rectangle over the Frankfurt Airport. A convenient way to do this is from this [website](http://geojson.io/#map=2/20.0/0.0), from which we can cut and paste the corresponding geoJSON description."]},{"cell_type":"code","metadata":{"id":"Hww9JAK0JgFm","colab_type":"code","colab":{}},"source":["geoJSON = {\n","  \"type\": \"FeatureCollection\",\n","  \"features\": [\n","    {\n","      \"type\": \"Feature\",\n","      \"properties\": {},\n","      \"geometry\": {\n","        \"type\": \"Polygon\",\n","        \"coordinates\": [\n","          [\n","            [\n","              8.473892211914062,\n","              49.98081240937428\n","            ],\n","            [\n","              8.658599853515625,\n","              49.98081240937428\n","            ],\n","            [\n","              8.658599853515625,\n","              50.06066538593667\n","            ],\n","            [\n","              8.473892211914062,\n","              50.06066538593667\n","            ],\n","            [\n","              8.473892211914062,\n","              49.98081240937428\n","            ]\n","          ]\n","        ]\n","      }\n","    }\n","  ]\n","}"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"VySnRWy3K0Jk","colab_type":"text"},"source":["Note that the last and first corners are identical, indicating closure of the polynomial. We have to bore down into the geoJSON structure to get the geometry coordinates with which we can create an _ee.Geometry()_ object:"]},{"cell_type":"code","metadata":{"id":"PRWSgszXTjFw","colab_type":"code","colab":{}},"source":["coords = geoJSON['features'][0]['geometry']['coordinates']\n","roi = ee.Geometry.Polygon(coords)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"C6rM63_lTqJ9","colab_type":"text"},"source":["Next, we filter the S1 archive to get an image over the _roi_ acquired sometime in August, 2020. Any old image will do fine, so we won't bother to specify the orbit number or whether we want the ASCENDING or DESCENDING node. For convenience we grab both decibel and float versions:"]},{"cell_type":"code","metadata":{"id":"ALF5YkahTvRl","colab_type":"code","colab":{}},"source":["ffa_db = ee.Image( ee.ImageCollection('COPERNICUS/S1_GRD') \\\n","                       .filterBounds(roi) \\\n","                       .filterDate(ee.Date('2020-08-01'),ee.Date('2020-08-31')) \\\n","                       .first() \\\n","                       .clip(roi))\n","ffa_fl = ee.Image( ee.ImageCollection('COPERNICUS/S1_GRD_FLOAT') \\\n","                       .filterBounds(roi) \\\n","                       .filterDate(ee.Date('2020-08-01'),ee.Date('2020-08-31')) \\\n","                       .first() \\\n","                       .clip(roi))"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Tcj_XBgDT032","colab_type":"text"},"source":["Notice that we have clipped the images to our _roi_ so as not to work with the entire swath. To confirm that we have an image, we list its bandnames, fetching the result from the GEE servers with the _getInfo()_ class method:"]},{"cell_type":"code","metadata":{"id":"-h-0Jz68T5Tn","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1597936000463,"user_tz":-120,"elapsed":1169,"user":{"displayName":"Mort Canty","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gic8wrtuzbljC46e5I9nhzEOgqYcVXCDqSxyrEQ1Q=s64","userId":"11792105515663483880"}},"outputId":"1cf23cfa-32fd-4e15-9f5d-4efebe5e1459"},"source":["ffa_db.bandNames().getInfo()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['VV', 'VH', 'angle']"]},"metadata":{"tags":[]},"execution_count":13}]},{"cell_type":"markdown","metadata":{"id":"e6HujXvIT-EC","colab_type":"text"},"source":["and display the VV band of the decibel version using the _getThumbURL()_ method and IPython's _display_ module. The float intensities $I$ are generally between 0 and 1, so we stretch the decibel image, which is $10\\log_{10}(I)$, from $-20$ to $0$:"]},{"cell_type":"code","metadata":{"id":"gLICx5Y0UCvD","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":560},"executionInfo":{"status":"ok","timestamp":1597918854165,"user_tz":-120,"elapsed":1217,"user":{"displayName":"Mort Canty","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gic8wrtuzbljC46e5I9nhzEOgqYcVXCDqSxyrEQ1Q=s64","userId":"11792105515663483880"}},"outputId":"95306850-4321-4705-8395-e62db29e9320"},"source":["url = ffa_db.select('VV').getThumbURL({'min':-20,'max':0})\n","disp.Image(url=url,width=800)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<img src=\"https://earthengine.googleapis.com/v1alpha/projects/earthengine-legacy/thumbnails/bd4628bb8f41f7ee052197b35d69d684-0c65d573320f05baf63393594596d95c:getPixels\" width=\"800\"/>"],"text/plain":["<IPython.core.display.Image object>"]},"metadata":{"tags":[]},"execution_count":12}]},{"cell_type":"markdown","metadata":{"id":"yAO0MhD5YuZC","colab_type":"text"},"source":["This is fine, but a little boring. We can use _folium_ to project onto a map for geographical context. The _folium_ _Map()_ constructor wants its _location_ keyword in longlat rather than latlong, so we do a list reverse in the first line:"]},{"cell_type":"code","metadata":{"id":"Z8iPEdmkZPk0","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":952},"executionInfo":{"status":"ok","timestamp":1597920285476,"user_tz":-120,"elapsed":1321,"user":{"displayName":"Mort Canty","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gic8wrtuzbljC46e5I9nhzEOgqYcVXCDqSxyrEQ1Q=s64","userId":"11792105515663483880"}},"outputId":"329bee73-97f4-4947-fce4-a78bc4b276ce"},"source":["location = roi.centroid().coordinates().getInfo()[::-1]\n","\n","# create the map object.\n","m = folium.Map(location=location, zoom_start=12, height=800, width=1000)\n","\n","# Add the S1 VV band to the map object.\n","m.add_ee_layer(ffa_db.select('VV'), {'min':-20,'max':0,'palette': ['black','white']}, 'FFA')\n","\n","# Add a layer control panel to the map.\n","m.add_child(folium.LayerControl())\n","\n","# Display the map.\n","display(m)"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/html":["<div style=\"width:100%;\"><div style=\"position:relative;width:100%;height:0;padding-bottom:60%;\"><span style=\"color:#565656\">Make this Notebook Trusted to load map: File -> Trust Notebook</span><iframe src=\"about:blank\" style=\"position:absolute;width:100%;height:100%;left:0;top:0;border:none !important;\" data-html=PCFET0NUWVBFIGh0bWw+CjxoZWFkPiAgICAKICAgIDxtZXRhIGh0dHAtZXF1aXY9ImNvbnRlbnQtdHlwZSIgY29udGVudD0idGV4dC9odG1sOyBjaGFyc2V0PVVURi04IiAvPgogICAgPHNjcmlwdD5MX1BSRUZFUl9DQU5WQVM9ZmFsc2U7IExfTk9fVE9VQ0g9ZmFsc2U7IExfRElTQUJMRV8zRD1mYWxzZTs8L3NjcmlwdD4KICAgIDxzY3JpcHQgc3JjPSJodHRwczovL2Nkbi5qc2RlbGl2ci5uZXQvbnBtL2xlYWZsZXRAMS40LjAvZGlzdC9sZWFmbGV0LmpzIj48L3NjcmlwdD4KICAgIDxzY3JpcHQgc3JjPSJodHRwczovL2NvZGUuanF1ZXJ5LmNvbS9qcXVlcnktMS4xMi40Lm1pbi5qcyI+PC9zY3JpcHQ+CiAgICA8c2NyaXB0IHNyYz0iaHR0cHM6Ly9tYXhjZG4uYm9vdHN0cmFwY2RuLmNvbS9ib290c3RyYXAvMy4yLjAvanMvYm9vdHN0cmFwLm1pbi5qcyI+PC9zY3JpcHQ+CiAgICA8c2NyaXB0IHNyYz0iaHR0cHM6Ly9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvTGVhZmxldC5hd2Vzb21lLW1hcmtlcnMvMi4wLjIvbGVhZmxldC5hd2Vzb21lLW1hcmtlcnMuanMiPjwvc2NyaXB0PgogICAgPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiBocmVmPSJodHRwczovL2Nkbi5qc2RlbGl2ci5uZXQvbnBtL2xlYWZsZXRAMS40LjAvZGlzdC9sZWFmbGV0LmNzcyIvPgogICAgPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiBocmVmPSJodHRwczovL21heGNkbi5ib290c3RyYXBjZG4uY29tL2Jvb3RzdHJhcC8zLjIuMC9jc3MvYm9vdHN0cmFwLm1pbi5jc3MiLz4KICAgIDxsaW5rIHJlbD0ic3R5bGVzaGVldCIgaHJlZj0iaHR0cHM6Ly9tYXhjZG4uYm9vdHN0cmFwY2RuLmNvbS9ib290c3RyYXAvMy4yLjAvY3NzL2Jvb3RzdHJhcC10aGVtZS5taW4uY3NzIi8+CiAgICA8bGluayByZWw9InN0eWxlc2hlZXQiIGhyZWY9Imh0dHBzOi8vbWF4Y2RuLmJvb3RzdHJhcGNkbi5jb20vZm9udC1hd2Vzb21lLzQuNi4zL2Nzcy9mb250LWF3ZXNvbWUubWluLmNzcyIvPgogICAgPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiBocmVmPSJodHRwczovL2NkbmpzLmNsb3VkZmxhcmUuY29tL2FqYXgvbGlicy9MZWFmbGV0LmF3ZXNvbWUtbWFya2Vycy8yLjAuMi9sZWFmbGV0LmF3ZXNvbWUtbWFya2Vycy5jc3MiLz4KICAgIDxsaW5rIHJlbD0ic3R5bGVzaGVldCIgaHJlZj0iaHR0cHM6Ly9yYXdjZG4uZ2l0aGFjay5jb20vcHl0aG9uLXZpc3VhbGl6YXRpb24vZm9saXVtL21hc3Rlci9mb2xpdW0vdGVtcGxhdGVzL2xlYWZsZXQuYXdlc29tZS5yb3RhdGUuY3NzIi8+CiAgICA8c3R5bGU+aHRtbCwgYm9keSB7d2lkdGg6IDEwMCU7aGVpZ2h0OiAxMDAlO21hcmdpbjogMDtwYWRkaW5nOiAwO308L3N0eWxlPgogICAgPHN0eWxlPiNtYXAge3Bvc2l0aW9uOmFic29sdXRlO3RvcDowO2JvdHRvbTowO3JpZ2h0OjA7bGVmdDowO308L3N0eWxlPgogICAgCiAgICA8bWV0YSBuYW1lPSJ2aWV3cG9ydCIgY29udGVudD0id2lkdGg9ZGV2aWNlLXdpZHRoLAogICAgICAgIGluaXRpYWwtc2NhbGU9MS4wLCBtYXhpbXVtLXNjYWxlPTEuMCwgdXNlci1zY2FsYWJsZT1ubyIgLz4KICAgIDxzdHlsZT4jbWFwX2E0YjE5MjE5MTY5ODRmNWE5YTI5NjQ5ZTY3ZTdkZThmIHsKICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7CiAgICAgICAgd2lkdGg6IDEwMDAuMHB4OwogICAgICAgIGhlaWdodDogODAwLjBweDsKICAgICAgICBsZWZ0OiAwLjAlOwogICAgICAgIHRvcDogMC4wJTsKICAgICAgICB9CiAgICA8L3N0eWxlPgo8L2hlYWQ+Cjxib2R5PiAgICAKICAgIAogICAgPGRpdiBjbGFzcz0iZm9saXVtLW1hcCIgaWQ9Im1hcF9hNGIxOTIxOTE2OTg0ZjVhOWEyOTY0OWU2N2U3ZGU4ZiIgPjwvZGl2Pgo8L2JvZHk+CjxzY3JpcHQ+ICAgIAogICAgCiAgICAKICAgICAgICB2YXIgYm91bmRzID0gbnVsbDsKICAgIAoKICAgIHZhciBtYXBfYTRiMTkyMTkxNjk4NGY1YTlhMjk2NDllNjdlN2RlOGYgPSBMLm1hcCgKICAgICAgICAnbWFwX2E0YjE5MjE5MTY5ODRmNWE5YTI5NjQ5ZTY3ZTdkZThmJywgewogICAgICAgIGNlbnRlcjogWzUwLjAyMDc2NDQ4MjU5NzM0LCA4LjU2NjI0NjAzMjcxNDIwNF0sCiAgICAgICAgem9vbTogMTIsCiAgICAgICAgbWF4Qm91bmRzOiBib3VuZHMsCiAgICAgICAgbGF5ZXJzOiBbXSwKICAgICAgICB3b3JsZENvcHlKdW1wOiBmYWxzZSwKICAgICAgICBjcnM6IEwuQ1JTLkVQU0czODU3LAogICAgICAgIHpvb21Db250cm9sOiB0cnVlLAogICAgICAgIH0pOwoKCiAgICAKICAgIHZhciB0aWxlX2xheWVyXzVmYzQzMTk2YjYwZjRmZGFiMDVkYWFmZDE1MjQ3ZDRlID0gTC50aWxlTGF5ZXIoCiAgICAgICAgJ2h0dHBzOi8ve3N9LnRpbGUub3BlbnN0cmVldG1hcC5vcmcve3p9L3t4fS97eX0ucG5nJywKICAgICAgICB7CiAgICAgICAgImF0dHJpYnV0aW9uIjogbnVsbCwKICAgICAgICAiZGV0ZWN0UmV0aW5hIjogZmFsc2UsCiAgICAgICAgIm1heE5hdGl2ZVpvb20iOiAxOCwKICAgICAgICAibWF4Wm9vbSI6IDE4LAogICAgICAgICJtaW5ab29tIjogMCwKICAgICAgICAibm9XcmFwIjogZmFsc2UsCiAgICAgICAgIm9wYWNpdHkiOiAxLAogICAgICAgICJzdWJkb21haW5zIjogImFiYyIsCiAgICAgICAgInRtcyI6IGZhbHNlCn0pLmFkZFRvKG1hcF9hNGIxOTIxOTE2OTg0ZjVhOWEyOTY0OWU2N2U3ZGU4Zik7CiAgICB2YXIgdGlsZV9sYXllcl8zZWViNDg2M2RlOTU0OTBlYjYwMjU5Nzg2Mjc1NjBiMCA9IEwudGlsZUxheWVyKAogICAgICAgICdodHRwczovL2VhcnRoZW5naW5lLmdvb2dsZWFwaXMuY29tL3YxYWxwaGEvcHJvamVjdHMvZWFydGhlbmdpbmUtbGVnYWN5L21hcHMvZTQyNGVhMTRkNDFlZTMxY2NmZmNkNjQ4YTQwMWIzMGEtYTk3YmI2MjVmZDMxZDBlZjFjNjg1NmJiOTM4YzJmMjkvdGlsZXMve3p9L3t4fS97eX0nLAogICAgICAgIHsKICAgICAgICAiYXR0cmlidXRpb24iOiAiTWFwIERhdGEgJmNvcHk7IDxhIGhyZWY9XCJodHRwczovL2VhcnRoZW5naW5lLmdvb2dsZS5jb20vXCI+R29vZ2xlIEVhcnRoIEVuZ2luZTwvYT4iLAogICAgICAgICJkZXRlY3RSZXRpbmEiOiBmYWxzZSwKICAgICAgICAibWF4TmF0aXZlWm9vbSI6IDE4LAogICAgICAgICJtYXhab29tIjogMTgsCiAgICAgICAgIm1pblpvb20iOiAwLAogICAgICAgICJub1dyYXAiOiBmYWxzZSwKICAgICAgICAib3BhY2l0eSI6IDEsCiAgICAgICAgInN1YmRvbWFpbnMiOiAiYWJjIiwKICAgICAgICAidG1zIjogZmFsc2UKfSkuYWRkVG8obWFwX2E0YjE5MjE5MTY5ODRmNWE5YTI5NjQ5ZTY3ZTdkZThmKTsKICAgIAogICAgICAgICAgICB2YXIgbGF5ZXJfY29udHJvbF9kMTA1ZmYxNTBhNDQ0MTQ2YTY3MTZkZjk1NWI2NDgwZSA9IHsKICAgICAgICAgICAgICAgIGJhc2VfbGF5ZXJzIDogeyAib3BlbnN0cmVldG1hcCIgOiB0aWxlX2xheWVyXzVmYzQzMTk2YjYwZjRmZGFiMDVkYWFmZDE1MjQ3ZDRlLCB9LAogICAgICAgICAgICAgICAgb3ZlcmxheXMgOiB7ICJGRkEiIDogdGlsZV9sYXllcl8zZWViNDg2M2RlOTU0OTBlYjYwMjU5Nzg2Mjc1NjBiMCwgfQogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgTC5jb250cm9sLmxheWVycygKICAgICAgICAgICAgICAgIGxheWVyX2NvbnRyb2xfZDEwNWZmMTUwYTQ0NDE0NmE2NzE2ZGY5NTViNjQ4MGUuYmFzZV9sYXllcnMsCiAgICAgICAgICAgICAgICBsYXllcl9jb250cm9sX2QxMDVmZjE1MGE0NDQxNDZhNjcxNmRmOTU1YjY0ODBlLm92ZXJsYXlzLAogICAgICAgICAgICAgICAge3Bvc2l0aW9uOiAndG9wcmlnaHQnLAogICAgICAgICAgICAgICAgIGNvbGxhcHNlZDogdHJ1ZSwKICAgICAgICAgICAgICAgICBhdXRvWkluZGV4OiB0cnVlCiAgICAgICAgICAgICAgICB9KS5hZGRUbyhtYXBfYTRiMTkyMTkxNjk4NGY1YTlhMjk2NDllNjdlN2RlOGYpOwogICAgICAgICAgICAKICAgICAgICAKPC9zY3JpcHQ+ onload=\"this.contentDocument.open();this.contentDocument.write(atob(this.getAttribute('data-html')));this.contentDocument.close();\" allowfullscreen webkitallowfullscreen mozallowfullscreen></iframe></div></div>"],"text/plain":["<folium.folium.Map at 0x7fe402ad02e8>"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"id":"-k9V1U0JUTd7","colab_type":"text"},"source":["### Pixel distributions\n","\n","In order to examine the statistics of the pixels in this image empirically, we'll need pixels from a featureless (textureless) subset. Here is a polygon covering the triangular wooded area at the lower center:"]},{"cell_type":"code","metadata":{"id":"zNhZRKV4UX51","colab_type":"code","colab":{}},"source":["geoJSON = {\n","  \"type\": \"FeatureCollection\",\n","  \"features\": [\n","    {\n","      \"type\": \"Feature\",\n","      \"properties\": {},\n","      \"geometry\": {\n","        \"type\": \"Polygon\",\n","        \"coordinates\": [\n","          [\n","            [\n","              8.534317016601562,\n","              50.021637833966786\n","            ],\n","            [\n","              8.530540466308594,\n","              49.99780882512238\n","            ],\n","            [\n","              8.564186096191406,\n","              50.00663576154257\n","            ],\n","            [\n","              8.578605651855469,\n","              50.019431940583104\n","            ],\n","            [\n","              8.534317016601562,\n","              50.021637833966786\n","            ]\n","          ]\n","        ]\n","      }\n","    }\n","  ]\n","}\n","coords = geoJSON['features'][0]['geometry']['coordinates']\n","roi_sub = ee.Geometry.Polygon(coords)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"iMnUgrxvUfte","colab_type":"text"},"source":["Using standard reducers from the GEE library we can easily calculate a histogram and estimate the first two moments (mean and variance) of the pixels in the polygon _roi_sub_ , again retrieving the results from the servers with _getInfo()_ ."]},{"cell_type":"code","metadata":{"id":"KfjUo-FyUklG","colab_type":"code","colab":{}},"source":["hist = ffa_fl.select('VV').reduceRegion(ee.Reducer.fixedHistogram(0,0.5,500),roi_sub).get('VV').getInfo()\n","mean = ffa_fl.select('VV').reduceRegion(ee.Reducer.mean(),roi_sub).get('VV').getInfo()\n","variance = ffa_fl.select('VV').reduceRegion(ee.Reducer.variance(),roi_sub).get('VV').getInfo()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"AcC98FbvUpmz","colab_type":"text"},"source":["Here is a plot of the (normalized) histogram using _numpy_ and _matplotlib_ :"]},{"cell_type":"code","metadata":{"id":"pMgsrzHHUuSX","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":265},"executionInfo":{"status":"ok","timestamp":1597936016315,"user_tz":-120,"elapsed":644,"user":{"displayName":"Mort Canty","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gic8wrtuzbljC46e5I9nhzEOgqYcVXCDqSxyrEQ1Q=s64","userId":"11792105515663483880"}},"outputId":"26ce08a0-f48b-4aae-8f7f-507f239a7796"},"source":["a = np.array(hist)\n","x = a[:,0]                # array of bucket edge positions\n","y = a[:,1]/np.sum(a[:,1]) # normalized array of bucket contents\n","plt.grid()\n","plt.plot(x,y)\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"2zyPzJOzU16A","colab_type":"text"},"source":["The above histogram is in fact a _gamma probability density distribution_ \n","\n","$$\n","p_\\gamma(x) = {1\\over \\beta^\\alpha\\Gamma(\\alpha)}x^{\\alpha-1}e^{-x/\\beta},\\quad {\\rm mean}(x) = \\alpha\\beta,\\quad {\\rm var}(x) = \\alpha\\beta^2 \\tag{1.1}\n","$$\n","\n","with parameters $\\alpha = 5$ and $\\beta = {\\mu}/\\alpha$, where $\\mu$ is the estimated mean value we just determined with GEE. The _gamma function_ $\\Gamma(\\alpha)$ is given by\n","$$\n","\\Gamma(\\alpha) = \\int_0^\\infty z^{\\alpha-1}e^{-z} dz.\n","$$\n","\n","We can easily verify this by plotting the gamma distribution with these parameters and overlaying it onto the histogram. Since the bucket widths are 0.001, we have to divide the plot by 1000."]},{"cell_type":"code","metadata":{"id":"2vQjpWmJU9jf","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":265},"executionInfo":{"status":"ok","timestamp":1597936020579,"user_tz":-120,"elapsed":659,"user":{"displayName":"Mort Canty","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gic8wrtuzbljC46e5I9nhzEOgqYcVXCDqSxyrEQ1Q=s64","userId":"11792105515663483880"}},"outputId":"4816a687-4326-49ee-d69b-ca3102bbd652"},"source":["alpha = 5\n","beta = mean/alpha\n","plt.grid()\n","plt.plot(x,y)\n","plt.plot(x, gamma.pdf(x, alpha, 0, beta)/1000, '-r')\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"dDs648j5VDR9","colab_type":"text"},"source":["In order to understand just why this is the case, let's take a step back and consider how the pixels were generated."]},{"cell_type":"markdown","metadata":{"id":"vvsqOV76adxT","colab_type":"text"},"source":["\n","### Single look complex (SLC) SAR measurements\n","The Sentinel-1 platform is a dual polarimteric synthetic aperture radar system, emitting one polarization (vertical in most cases) and recording both vertical and horizontal reflected polarizations. This is represented mathematically as\n","\n","$$\n","\\pmatrix{E_v^b\\cr E_h^b} = {e^{-{\\bf i}rk}\\over r}\\pmatrix{S_{vv} & S_{vh}\\cr S_{hv} & S_{hh}}\\pmatrix{E_v^i\\cr 0}. \\tag{1.2}\n","$$\n","\n","The incident, vertically polarized radar signal $\\pmatrix{E_v^i\\cr 0}$ is transformed by a complex _scattereing matrix_ $\\pmatrix{S_{vv} & S_{vh}\\cr S_{hv} & S_{hh}}$ into the backscattered signal $\\pmatrix{E_v^b\\cr E_h^b}$ having both vertical and horizontal polarization components. The exponent accounts for the phase shift due to the return distance $r$ from target to sensor, where wave number is $k=2\\pi/\\lambda$. From measurement of the backscattered radiation at the sensor, two of the four complex scattering matrix elements can be derived. Written as a complex vector, they are\n"," \n","$$\n","S = \\pmatrix{S_{vv}\\cr S_{vh}}.          \\tag{1.3}\n","$$\n","\n","We write the complex transpose of the vector $S$ as $S^\\dagger = (S_{vv}^*\\ S_{vh}^*)$, where the $*$ denotes complex conjugation. The inner product of $S$ with itself is the total received power (also referred to as the _span_ image)\n","\n","$$\n","P = S^\\dagger S = (S_{vv}^*\\ S_{vh}^*)\\pmatrix{S_{vv}\\cr S_{vh}} = |S_{vv}|^2 + |S_{vh}|^2 \\tag{1.4}\n","$$\n","\n","and the outer product is the (dual pol) _covariance matrix image_\n","\n","$$\n","C2 = SS^\\dagger = \\pmatrix{S_{vv}\\cr S_{vh}}(S_{vv}^*\\ S_{vh}^*) = \\pmatrix{|S_{vv}|^2 & S_{vv}^*S_{vh} \\cr S_{vh}^*S_{vv} & |S_{vh}|^2}. \\tag{1.5}\n","$$\n","\n","The diagonal elements are real numbers, the off-diagonal elements are complex conjugates of each other and contain the relative phases of the $S_{vv}$ and $S_{vh}$ components. The off-diagonal elements are not available for S1 archived imagery on the GEE, so that if we nevertheless choose to represent the data in covariance matrix form, the matrix is diagonal: \n","\n","$$\n","C2 = \\pmatrix{|S_{vv}|^2 & 0 \\cr 0 & |S_{vh}|^2}. \\tag{1.6}\n","$$\n","\n","### Speckle\n","\n","The most striking characteristic of SAR images, when compared to their visual/infrared\n","counterparts, is the disconcerting _speckle_ effect which makes visual interpretation very\n","difficult. Speckle gives the appearance of random noise, but\n","it is actually a deterministic consequence of the coherent nature of the radar signal.\n","\n","For single polarization transmission and reception, e.g., vertical-vertical ($vv$), the received SLC signal can be modelled in the form\n","\n","$$\n","S_{vv} = {|S^a_{vv}|\\over\\sqrt{n}}\\sum_{k=1}^n e^{{\\bf i}\\phi_k}, \\tag{1.7}\n","$$\n","\n","where $|S^a_{vv}|$ is the overall amplitude characterizing the signal scattered from the  area covered by a single pixel, e.g., $10\\times 10\\ m^2$ for our S1 data,  with the phase set equal to zero for convenience. The effects of randomly distributed scatterers within the irradiated area, with dimensions  of the order of the incident wavelength (for C-band approx. 8 cm), add coherently and introduce a change in phase of the  received signal. This is indicated by thy sum term in the above equation. This effect varies from pixel to pixel and gives rise to _speckle_ in the intensities $|S_{vv}|^2$. \n","\n","If we expand Eq. (1.7) into its real and imaginary parts, we can understand it better:\n","\n","$$\n","S_{vv} = {|S^a_{vv}|\\over\\sqrt{n}}\\sum_{k=1}^n e^{{\\bf i}\\phi_k} = {|S^a_{vv}|\\over\\sqrt{n}}\\left(\\sum_k\\cos\\phi_k + {\\bf i}\\sum_k\\sin\\phi_k\\right) =  {|S^a_{vv}|\\over\\sqrt{n}}(x + {\\bf i}y) \\tag{1.8}\n","$$\n","\n","where\n","\n","$$\n","x = \\sum_k\\cos\\phi_k, \\quad y = \\sum_k\\sin\\phi_k.\n","$$\n","\n","Because the phase shifts $\\phi_k$ are randomly and uniformly distributed, the variables $x$ and $y$ are sums of identically distributed cosine and sine terms respectively. The __Central Limit Theorem__ of statistics then says that $x$ and $y$ will have a normal distribution with zero mean and variance $\\sigma^2 =n/2$ in the limit of large number $n$ of scatterers. We can verify this with a simple piece of code in which we set $n=10000$:"]},{"cell_type":"code","metadata":{"id":"jGx_jHFSanpR","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":265},"executionInfo":{"status":"ok","timestamp":1597998531974,"user_tz":-120,"elapsed":6129,"user":{"displayName":"Mort Canty","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gic8wrtuzbljC46e5I9nhzEOgqYcVXCDqSxyrEQ1Q=s64","userId":"11792105515663483880"}},"outputId":"bb909920-f63f-4ce9-a1e4-59594a440f81"},"source":["def X(n):\n","    return np.sum(np.cos(4*np.pi*(np.random.rand(n)-0.5)))/np.sqrt(n/2)\n","\n","n= 10000\n","Xs = [X(n) for i in range(10000)]\n","y,x = np.histogram(Xs,100)\n","plt.plot(x[:-1],y,'b.')\n","plt.grid()\n","plt.show()"],"execution_count":3,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"5Po6uERXauAB","colab_type":"text"},"source":["Furthermore, $x$ and $y$ are uncorrelated since, in the expression for covariance of $x$ and $y$, the sums of products of cosine and sine terms cancel to zero. This means that  $x + {\\bf i}y$, and hence the observed single look complex signal $S_{vv}$, has a _complex normal distribution_ .\n","\n","Now what about the pixels values in the Sentinel-1 VV intensity images? They are given by the square of the amplitude of $S_{vv}$,\n","\n","$$\n","|S_{vv}|^2 = S_{vv}S^*_{vv} = {|S^a_{vv}|^2\\over n}(x^2+y^2). \\tag{1.9}\n","$$\n","\n","(Actually averages of the above, as we'll see later.) We can write this in the form\n","\n","$$\n","|S_{vv}|^2 =  {|S^a_{vv}|^2\\over n}{n\\over 2}\\left({x^2\\over n/2}+{y^2\\over n/2}\\right) = |S^a_{vv}|^2{u\\over 2}, \\tag{1.10}\n","$$\n","\n","where \n","\n","$$\n","u = \\left({x^2\\over n/2}+{y^2\\over n/2}\\right) \\tag{1.11}\n","$$\n","\n","is the sum of the squares of two variables with independent standard normal distributions. Applying the  \n","\n","   - __Theorem:__ If the measurements $x_i,\\ i=1\\dots m$, are independent and standard normally distributed (i.e., with mean $0$ and variance $1$), then the variable $x=\\sum_{i=1}^m x_i^2$ is  chi-square distributed with $m$ degrees of freedom, given by\n","\n","$$\n","p_{\\chi^2;m}(x)={1 \\over 2^{m/2}\\Gamma(m/2)} z^{(m-2)/2} e^{-x/2},\\quad {\\rm mean}(x)=m,\\quad {\\rm var}(x) = 2m, \\tag{1.12}\n","$$\n","\n","we see that $u$ is chi square distributed with degrees of freedom $m=2$,\n","\n","$$\n","p_u(u) = {1\\over 2}e^{-u/2}. \\tag{1.13}\n","$$\n","\n","To simplify the notation, let $s=|S_{vv}|^2 $ and  $a=|S^a_{vv}|^2$. Then from (1.10)\n","\n","$$\n","s = a{u\\over 2} \\tag{1.14}\n","$$\n","\n","To get the distribution $p_s(s)$ of the observed signal from the distribution of $u$, we apply the standard transformation formula\n","\n","$$\n","p_s(s) = p_u(u)\\left|{du\\over ds}\\right| = {1\\over 2}e^{-u/2}{2\\over a} = {1\\over a} e^{-s/a}. \\tag{1.15}\n","$$\n","\n","Compare this with the definition of the _exponential probability distribution_\n","\n","$$\n","p_{exp}(x) = {1\\over\\beta}e^{-x/\\beta},\\quad {\\rm mean}(x) = \\beta,\\quad {\\rm var}(x) = \\beta. \\tag{1.16}\n","$$\n","\n","We conclude that the measured intensity signal $s=|S_{vv}|^2$ has an exponential distribution with mean and variance equal to the underlying signal strength $a=|S^a_{vv}|^2$.\n","\n","However we still haven't quite characterized the statistics of the pixels in the intensity bands of the Sentinel-1 images on the GEE. \n"]},{"cell_type":"markdown","metadata":{"id":"a1gYVejHb7jd","colab_type":"text"},"source":["### Multi-look SAR statistics\n","\n","Multi-look processing essentially corresponds to the averaging of neighborhood pixels with the objective\n","of reducing speckle and compressing the data. In practice, the averaging is often not performed in the\n","spatial domain, but rather in the frequency domain during range/azimuth compression of the received signal. \n","\n","Look averaging takes place at the cost of spatial resolution. The spatial resolution attainable with SAR satellite platforms  involves, among many other considerations, a compromise between azimuthal resolution and swath width, see  [Moreira et al. (2013)](https://elib.dlr.de/82313/) for a good discussion. In the Sentinel-1 _Interferometric Wide Swath_ acquisition mode, the pixels are about 20m $\\times$ 4m (azimuth $\\times$ range) in extent and the swath widths are about 250km. For the multi-looking procedure, five cells are incoherently averaged in the range direction to achieve $20m \\times 20m$ resolution. (Pixels ingested into the GEE are resampled to $10m\\times 10m$.) The averaging process, which we can symbolize using angular brackets as $\\langle |S_{vv}|^2 \\rangle$ or $\\langle |S_{vh}|^2 \\rangle$, has the desirable effect of reducing speckle (at the cost of range resolution) in the intensity images. We can see this as follows, first quoting another well-known Theorem in statistics:\n","\n","   - __Theorem:__ If the quantities $s_i,\\ i=1\\dots m,$ are independent and each have exponential distributions given by Eq. (1.16), then $x = \\sum_{i=1}^m s_i$ has the gamma distribution Eq. (1.1) with $\\alpha=m,\\ \\beta=a$. Its mean is $\\alpha\\beta =ma$ and its variance is $\\alpha\\beta^2 = ma^2.$\n","\n","Again with the notation $s=|S_{vv}|^2 $ and  $a=|S^a_{vv}|^2$, if intensity measurements $s$ are summed over $m$ looks to give $\\sum_{i=1}^m s_i$, then according to this Theorem  the sum (not the average!) will be gamma distributed with $\\alpha= m$ and $\\beta=a$, provided the $s_i$ are independent. The look-averaged image is\n","\n","$$\n","\\langle s\\rangle = {1\\over m}\\sum_{i=1}^m s_i \\tag{1.17}\n","$$\n","\n","and its mean value is\n","\n","$$\n","{\\rm mean}(\\langle s\\rangle) = {1\\over m}\\sum_{i=1}^m {\\rm mean}(s_i) = {1\\over m}\\sum_{i=1}^m a = a. \\tag{1.18}\n","$$\n","\n","Now we see that the histogram of the Sentinel-1 multi-look image $\\langle s\\rangle =\\langle |S_{vv}|^2 \\rangle$ that we generated above must follow a gamma distribution with the parameters \n","\n","$$\n","\\alpha=m,\\quad \\beta' = {a\\over m} = {{\\rm mean}(\\langle s\\rangle)\\over m}, \\tag{1.19}\n","$$\n","\n","as we demonstrated earlier with the measured histogram.\n","\n","The covariance representation of the dual pol images then becomes\n","\n","$$\n","C2 = \\pmatrix{\\langle|S_{vv}|^2\\rangle & 0 \\cr 0 & \\langle|S_{vh}|^2\\rangle}. \\tag{1.20}\n","$$\n","\n","\n","### Equivalent number of looks\n","\n","The variance of $\\langle s\\rangle$ is given by\n","\n","$$\n","{\\rm var}(\\langle s\\rangle) = {1\\over m^2}{\\rm var}(\\sum_{i=1}^m s_i)= {1\\over m^2}ma^2 = {a^2\\over m}. \\tag{1.21}\n","$$\n","\n","where we have used the fact that the variance of the gamma distribution is $\\alpha\\beta'^2=ma^2$.\n","\n","In practice, the neighborhood pixel intensities contributing to the look average will not be completely independent, but correlated to some extent. This is accounted for by defining an _equivalent number of looks_\n","(ENL) whose definition is motivated by Eq. (1.21), that is,\n","\n","$$\n","{\\rm ENL} = {a^2\\over {\\rm var}(\\langle s\\rangle)} = {{\\rm mean}(\\langle s\\rangle)^2\\over {\\rm var}(\\langle s\\rangle)}.\\tag{1.22}\n","$$\n","\n","In general it will be smaller than $m$. Let's see what we get for our subset of the airport image:"]},{"cell_type":"code","metadata":{"id":"3FIc22YZbI95","colab_type":"code","colab":{}},"source":["mean**2/variance"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"hMrNjW56bNXF","colab_type":"text"},"source":["The value given by the provider (ESA) for the COPERNICUS/S1_GRD_FLOAT imagery in the GEE archive is ENL = 4.4, an average over all swaths.\n","\n","### Outlook\n","\n","Now that we have a description of the statistical properties of the Sentinel-1 images on the GEE, in Part 2 of the Tutorial we will discuss statistical methods to detect changes in two Sentinel-1 images."]}]}